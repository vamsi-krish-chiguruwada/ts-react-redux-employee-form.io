{"version":3,"sources":["Components/empForm/empForm.tsx","middileware/getRequest.tsx","redux/reduxForm.ts","Components/empTable/empTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EmpForm","className","onSubmit","this","props","handleSubmit","required","type","onChange","setNameValue","value","state","name","placeholder","setEmpidValue","empId","setAgeValue","Number","age","React","Component","getRequest","dispatch","next","action","a","payload","url","method","data","onSuccess","onFail","axios","request","baseURL","response","console","log","employees","SUBMIT_INITIAL_STATE","submitDetails","per","initialState","store","configureStore","reducer","middleware","getDefaultMiddleware","EmployeeTable","getState","map","obj","App","event","temp","target","setState","preventDefault","alert","getstate","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bddaf48b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./empForm.css\";\r\ninterface MyState {\r\n    name: string;\r\n    empId: string;\r\n    age: number | null;\r\n  }\r\ninterface empFormPropTypes{\r\n    state:MyState,\r\n    setNameValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    setEmpidValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    setAgeValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    handleSubmit:(event: React.FormEvent)=>void\r\n}\r\nclass EmpForm extends React.Component<empFormPropTypes> {\r\n  render() {\r\n    return (\r\n        <div className=\"formContainer\">\r\n        <h1>fill employee details</h1>\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            onChange={this.props.setNameValue}\r\n            value={this.props.state.name}\r\n            placeholder=\"Name\"\r\n          />\r\n\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            onChange={this.props.setEmpidValue}\r\n            value={this.props.state.empId}\r\n            placeholder=\"employee Id\"\r\n          />\r\n\r\n          <input\r\n            required\r\n            type=\"number\"\r\n            onChange={this.props.setAgeValue}\r\n            value={Number(this.props.state.age)}\r\n            placeholder=\"age\"\r\n          />\r\n\r\n          <input className = \"formSubmit\" type=\"submit\" value=\"submit\" />\r\n        </form>\r\n      </div>\r\n\r\n        // 8*******************************************************************\\\\\r\n    //   <div className=\"formContainer\">\r\n    //     <h1>fill employee details</h1>\r\n    //     {/* <h1>{store.getState().inputName}</h1> */}\r\n    //     <form onSubmit={this.props.handleSubmit}>\r\n    //       <input\r\n    //         required\r\n    //         type=\"text\"\r\n    //         onChange={this.props.setNameValue}\r\n    //         value={this.props.state.name}\r\n    //         placeholder=\"Name\"\r\n    //       />\r\n\r\n    //       <input\r\n    //         required\r\n    //         type=\"text\"\r\n    //         onChange={this.props.setEmpidValue}\r\n    //         value={this.props.state.empId}\r\n    //         placeholder=\"employee Id\"\r\n    //       />\r\n\r\n    //       <input\r\n    //         required\r\n    //         type=\"number\"\r\n    //         onChange={this.props.setAgeValue}\r\n    //         value={this.props.state.age}\r\n    //         placeholder=\"age\"\r\n    //       />\r\n\r\n    //       <input className = \"formSubmit\" type=\"submit\" value=\"submit\" />\r\n    //     </form>\r\n    //   </div>\r\n    );\r\n  }\r\n}\r\nexport default EmpForm;\r\n","import axios from \"axios\";\r\n\r\nconst getRequest = ({ dispatch }: any) => (next: any) => async (action: any) => {\r\n  if (action.type !== \"getEmpData\") return next(action);\r\n  \r\n  next(action);\r\n  const { url, method, data, onSuccess, onFail } = action.payload;\r\n  try {\r\n    const response = await axios.request({\r\n      baseURL: 'https://ts-redux-test6.free.beeceptor.com',\r\n      url,\r\n      method,\r\n      data,\r\n    });\r\n    console.log(\"...........\",response.data);\r\n    dispatch({ type: \"SUBMIT_INITIAL_STATE\", payload: response.data.employees });\r\n    // dispatch({ type: \"SUBMIT_NAME\", payload: {\r\n    //     name: \"success\",\r\n    //     empId: \"success\",\r\n    //     age: 90,\r\n    //   } });\r\n  } catch (error) {\r\n      console.log(error);\r\n    dispatch({\r\n      type: \"SUBMIT_NAME\",\r\n      payload: {\r\n        name: \"error\",\r\n        empId: \"error\",\r\n        age: 90,\r\n      },\r\n    });\r\n  }\r\n\r\n};\r\n\r\nexport default getRequest;\r\n","// import { createStore, applyMiddleware } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import postRequest from \"../middileware/getRequest\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport getRequest from \"../middileware/getRequest\";\r\n\r\nconst SUBMIT_NAME = \"SUBMIT_NAME\";\r\nconst SUBMIT_INITIAL_STATE = \"SUBMIT_INITIAL_STATE\";\r\n// const SHOW_POPUP = \"SHOW_POPUP\";\r\n\r\ninterface MyState {\r\n  name: string;\r\n  empId: string;\r\n  age: number | null;\r\n}\r\n\r\ninterface submitDetailsReturnType {\r\n  type: string;\r\n  payload: MyState;\r\n}\r\n\r\ninterface initialStateType {\r\n  employees: MyState[];\r\n  // showPopup:any\r\n}\r\n\r\nexport const submitDetails = (per: MyState): submitDetailsReturnType => {\r\n  return {\r\n    type: SUBMIT_NAME,\r\n    payload: per,\r\n  };\r\n};\r\n// export const showPopup = (per: any): any => {\r\n//   return {\r\n//     type: SHOW_POPUP,\r\n//     payload: per,\r\n//   };\r\n// };\r\n\r\nconst initialState = {\r\n  employees: [],\r\n  // showPopup:false\r\n};\r\n\r\nconst reducer = (\r\n  state: initialStateType = initialState,\r\n  // ? add fun type here at any\r\n  action: submitDetailsReturnType | any\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case \"SUBMIT_NAME\":\r\n      return {\r\n        ...state,\r\n        employees: [...state.employees, action.payload],\r\n      };\r\n    // case \"SHOW_POPUP\":\r\n    //   return{\r\n    //     ...state,\r\n    //     showPopup:action.payload\r\n\r\n    //   };\r\n    case SUBMIT_INITIAL_STATE:\r\n      return{\r\n        employees:action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// ()=>{\r\n//   return(configureStore({reducer}))\r\n// }\r\n\r\n// const store = createStore(reducer, applyMiddleware(logger));\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware: [...getDefaultMiddleware(), getRequest],\r\n});\r\n\r\n// store.dispatch((dispatch: any, getstate: any) => {\r\n//   dispatch({\r\n//     type: \"getEmpData\",\r\n//     payload: {\r\n//       url: \"/employees\",\r\n//       // gethod:\"get\",\r\n//       // date:{},\r\n//       onSuccess: \"updated\",\r\n//       onApiFail: \"failed\",\r\n//     },\r\n//   });\r\n\r\n//   type: \"\",\r\n// payload: {\r\n//   name: \"string\",\r\n//   empId: \"string\",\r\n//   age: 0,\r\n// },\r\n// });\r\n\r\n// store.dispatch((dispatch: any, getstate: any) => {\r\n//   dispatch({\r\n//     type: \"getEmpData\",\r\n//     payload: {\r\n//       url: \"/employees\",\r\n//       gethod:\"post\",\r\n//       data:{\"name\": \"success\", \"empId\": \"post req \", \"age\": 0},\r\n//       onSuccess: \"updated\",\r\n//       onApiFail: \"failed\",\r\n//     },\r\n//   });\r\n\r\n//   //   type: \"\",\r\n//     // payload: {\r\n//     //   name: \"string\",\r\n//     //   empId: \"string\",\r\n//     //   age: 0,\r\n//     // },\r\n// });\r\n\r\n// store.dispatch((dispatch: any, getstate: any) => {\r\n//   dispatch({\r\n//     type: \"getEmpData\",\r\n//     payload: {\r\n//       url: \"/\",\r\n//       // gethod:\"get\",\r\n//       // date:{},\r\n//       onSuccess: \"updated\",\r\n//       onApiFail: \"failed\",\r\n//     },\r\n//   });\r\n\r\n//   //   type: \"\",\r\n//     // payload: {\r\n//     //   name: \"string\",\r\n//     //   empId: \"string\",\r\n//     //   age: 0,\r\n//     // },\r\n// });\r\n\r\nexport default store;\r\n","import React from \"react\";\r\n// import store from \"../../redux/reduxForm\";\r\nimport \"./empTable.css\"\r\ninterface MyState {\r\n    name: string;\r\n    empId: string;\r\n    age: number | null;\r\n  }\r\n// interface empTablePropTypes {\r\n//     store:MyState[]\r\n//   }\r\nclass EmployeeTable extends React.Component<any> {\r\n//   state = {\r\n//     employees: [],\r\n//   };\r\n//   componentDidMount() {\r\n//     this.unsubscribe = store.subscribe(() => {\r\n//       this.setState({ employees: this.props.store.getState().employees });\r\n//     //   console.log(this.props.store.getState().employees);\r\n//     });\r\n//   }\r\n//   componentWillReceiveProps(){\r\n//     this.unsubscribe = store.subscribe(() => {\r\n//         this.setState({ employees: this.props.store.getState().employees });\r\n//         // console.log(this.props.store.getState().employees);\r\n//       });\r\n//   }\r\n//   componentWillUnmount() {\r\n//     this.unsubscribe();\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"tableContainer\">\r\n          {/* {console.log(this.props.store.getState())} */}\r\n        <table>\r\n          <tr>\r\n            <th>name</th>\r\n            <th>employee id</th>\r\n            <th>age</th>\r\n          </tr>\r\n\r\n          {this.props.store.getState().employees.map((obj:MyState) => (\r\n            <tr key={obj.empId}>\r\n              <td>{obj.name}</td>\r\n              <td>{obj.empId}</td>\r\n              <td>{obj.age}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport EmpForm from \"./Components/empForm/empForm\";\n// import EmpDetailsConfomPopup from \"./Components/empDetailsConfomPopup/empDetailsConfomPopup\";\n\nimport store from \"./redux/reduxForm\";\nimport { submitDetails } from \"./redux/reduxForm\";\n\nimport EmpTable from \"./Components/empTable/empTable\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\ninterface MyState {\n  name: string;\n  empId: string;\n  age: number | null;\n}\n\nclass App extends React.Component {\n  state: MyState = {\n    name: \"\",\n    empId: \"\",\n    age: null,\n  };\n\n  componentDidMount() {\n    store.dispatch((dispatch: any, getstate: any) => {\n      dispatch({\n        type: \"getEmpData\",\n        payload: {\n          url: \"/employees\",\n          // gethod:\"post\",\n          // data:{\"name\": \"success\", \"empId\": \"post req \", \"age\": 0},\n          // onSuccess: \"updated\",\n          // onApiFail: \"failed\",\n        },\n      });\n    });\n  }\n\n  //\n  // store.dispatch(()=>({\n  //   type: \"\",\n  //   payload: {\n  //     name: \"string\",\n  //     empId: \"string\",\n  //     age: 0,\n  //   },\n  // }));\n  //\n\n  setNameValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    // console.log(temp);\n    temp.name = event.target.value;\n    this.setState(temp);\n  };\n  setEmpidValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    temp.empId = event.target.value;\n    this.setState(temp);\n  };\n  setAgeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    temp.age = Number(event.target.value);\n    this.setState(temp);\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    // ?\n    console.log(store.getState());\n    store.dispatch(submitDetails(this.state));\n    this.setState({\n      name: \"\",\n      empId: \"\",\n      age: null,\n    });\n    alert(\"submited successfully\");\n  };\n\n  // handlePopup = (per:boolean)=>{\n  //   store.dispatch(showPopup(per));\n  // }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav>\n            <Link to=\"/\">\n              <button>home</button>\n            </Link>\n\n            <Link to=\"/table\">\n              <button>table</button>\n            </Link>\n          </nav>\n\n          <Switch>\n            <Route path=\"/table\">\n              <EmpTable store={store} />\n            </Route>\n\n            <Route path=\"/\">\n              <EmpForm\n                state={this.state}\n                setNameValue={this.setNameValue}\n                setEmpidValue={this.setEmpidValue}\n                setAgeValue={this.setAgeValue}\n                handleSubmit={this.handleSubmit}\n              />\n              {/* <button onClick={()=>this.handlePopup(true)}>click</button>\n              {store.getState().showPopup?<EmpDetailsConfomPopup/>:null} */}\n            </Route>\n          </Switch>\n          {/* <EmpTable store={store}/> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}