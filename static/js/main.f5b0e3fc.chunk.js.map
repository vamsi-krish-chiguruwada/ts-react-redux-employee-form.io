{"version":3,"sources":["Components/empForm/empForm.tsx","redux/reduxForm.ts","Components/empTable/empTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EmpForm","className","onSubmit","this","props","handleSubmit","required","type","onChange","setNameValue","value","state","name","placeholder","setEmpidValue","empId","setAgeValue","Number","age","React","Component","submitDetails","per","payload","initialState","employees","store","createStore","action","composeWithDevTools","EmployeeTable","getState","map","obj","App","event","temp","target","setState","preventDefault","dispatch","alert","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5b0e3fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./empForm.css\";\r\ninterface MyState {\r\n    name: string;\r\n    empId: string;\r\n    age: number | null;\r\n  }\r\ninterface empFormPropTypes{\r\n    state:MyState,\r\n    setNameValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    setEmpidValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    setAgeValue:(event: React.ChangeEvent<HTMLInputElement>)=>void,\r\n    handleSubmit:(event: React.FormEvent)=>void\r\n}\r\nclass EmpForm extends React.Component<empFormPropTypes> {\r\n  render() {\r\n    return (\r\n        <div className=\"formContainer\">\r\n        <h1>fill employee details</h1>\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            onChange={this.props.setNameValue}\r\n            value={this.props.state.name}\r\n            placeholder=\"Name\"\r\n          />\r\n\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            onChange={this.props.setEmpidValue}\r\n            value={this.props.state.empId}\r\n            placeholder=\"employee Id\"\r\n          />\r\n\r\n          <input\r\n            required\r\n            type=\"number\"\r\n            onChange={this.props.setAgeValue}\r\n            value={Number(this.props.state.age)}\r\n            placeholder=\"age\"\r\n          />\r\n\r\n          <input className = \"formSubmit\" type=\"submit\" value=\"submit\" />\r\n        </form>\r\n      </div>\r\n\r\n        // 8*******************************************************************\\\\\r\n    //   <div className=\"formContainer\">\r\n    //     <h1>fill employee details</h1>\r\n    //     {/* <h1>{store.getState().inputName}</h1> */}\r\n    //     <form onSubmit={this.props.handleSubmit}>\r\n    //       <input\r\n    //         required\r\n    //         type=\"text\"\r\n    //         onChange={this.props.setNameValue}\r\n    //         value={this.props.state.name}\r\n    //         placeholder=\"Name\"\r\n    //       />\r\n\r\n    //       <input\r\n    //         required\r\n    //         type=\"text\"\r\n    //         onChange={this.props.setEmpidValue}\r\n    //         value={this.props.state.empId}\r\n    //         placeholder=\"employee Id\"\r\n    //       />\r\n\r\n    //       <input\r\n    //         required\r\n    //         type=\"number\"\r\n    //         onChange={this.props.setAgeValue}\r\n    //         value={this.props.state.age}\r\n    //         placeholder=\"age\"\r\n    //       />\r\n\r\n    //       <input className = \"formSubmit\" type=\"submit\" value=\"submit\" />\r\n    //     </form>\r\n    //   </div>\r\n    );\r\n  }\r\n}\r\nexport default EmpForm;\r\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst SUBMIT_NAME = \"SUBMIT_NAME\";\r\ninterface MyState {\r\n  name: string;\r\n  empId: string;\r\n  age: number | null;\r\n}\r\n\r\ninterface submitDetailsReturnType {\r\n  type: string;\r\n  payload: MyState;\r\n}\r\n\r\ninterface initialStateType{\r\n    employees:MyState[]\r\n}\r\n\r\nexport const submitDetails = (per: MyState): submitDetailsReturnType => {\r\n  return {\r\n    type: SUBMIT_NAME,\r\n    payload: per,\r\n  };\r\n};\r\n\r\n\r\nconst initialState = {\r\n  employees: [\r\n  ],\r\n};\r\n\r\nconst reducer = (state: initialStateType = initialState, action:submitDetailsReturnType):initialStateType => {\r\n  switch (action.type) {\r\n    case \"SUBMIT_NAME\":\r\n      return {\r\n        employees: [...state.employees, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React from \"react\";\r\n// import store from \"../../redux/reduxForm\";\r\nimport \"./empTable.css\"\r\ninterface MyState {\r\n    name: string;\r\n    empId: string;\r\n    age: number | null;\r\n  }\r\n// interface empTablePropTypes {\r\n//     store:MyState[]\r\n//   }\r\nclass EmployeeTable extends React.Component<any> {\r\n//   state = {\r\n//     employees: [],\r\n//   };\r\n//   componentDidMount() {\r\n//     this.unsubscribe = store.subscribe(() => {\r\n//       this.setState({ employees: this.props.store.getState().employees });\r\n//     //   console.log(this.props.store.getState().employees);\r\n//     });\r\n//   }\r\n//   componentWillReceiveProps(){\r\n//     this.unsubscribe = store.subscribe(() => {\r\n//         this.setState({ employees: this.props.store.getState().employees });\r\n//         // console.log(this.props.store.getState().employees);\r\n//       });\r\n//   }\r\n//   componentWillUnmount() {\r\n//     this.unsubscribe();\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"tableContainer\">\r\n          {/* {console.log(this.props.store.getState())} */}\r\n        <table>\r\n          <tr>\r\n            <th>name</th>\r\n            <th>employee id</th>\r\n            <th>age</th>\r\n          </tr>\r\n\r\n          {this.props.store.getState().employees.map((obj:MyState) => (\r\n            <tr key={obj.empId}>\r\n              <td>{obj.name}</td>\r\n              <td>{obj.empId}</td>\r\n              <td>{obj.age}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport EmpForm from \"./Components/empForm/empForm\";\n\nimport store from \"./redux/reduxForm\";\nimport { submitDetails } from \"./redux/reduxForm\";\nimport EmpTable from \"./Components/empTable/empTable\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\ninterface MyState {\n  name: string;\n  empId: string;\n  age: number | null;\n}\n\nclass App extends React.Component {\n  state: MyState = {\n    name: \"\",\n    empId: \"\",\n    age: null,\n  };\n\n  setNameValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    // console.log(temp);\n    temp.name = event.target.value;\n    this.setState(temp);\n  };\n  setEmpidValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    temp.empId = event.target.value;\n    this.setState(temp);\n  };\n  setAgeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let temp = { ...this.state };\n    temp.age = Number(event.target.value);\n    this.setState(temp);\n  };\n\n  handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    // ?\n    store.dispatch(submitDetails(this.state));\n    this.setState({\n      name: \"\",\n      empId: \"\",\n      age: null,\n    });\n    alert(\"submited successfully\");\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav>\n            <Link to=\"/\">\n              <button>home</button>\n            </Link>\n\n            <Link to=\"/table\">\n              <button>table</button>\n            </Link>\n          </nav>\n\n          <Switch>\n            <Route path=\"/table\">\n              <EmpTable store={store} />\n            </Route>\n\n            <Route path=\"/\">\n              <EmpForm\n                state={this.state}\n                setNameValue={this.setNameValue}\n                setEmpidValue={this.setEmpidValue}\n                setAgeValue={this.setAgeValue}\n                handleSubmit={this.handleSubmit}\n              />\n            </Route>\n          </Switch>\n          {/* <EmpTable store={store}/> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}